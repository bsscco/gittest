명령어 모음
mkdir gittest
cd gittest 
git init

git remote add remote_alias https://github.com/bsscco/gittest.git

git clone -o remote_alias -b remote_branch_name https://github.com/bsscco/gittest.git
remote_alias : 원격저장소를 가리킬 별명
remote_branch_name : 원격저장소에 있는 브랜치 중 하나의 이름

git remote -v
git add 파일경로
git add *
git commit -m 'message'
git push remote_alias remote_branch_name

git branch -d local_branch_name
git diff branch_name
git tag
git tag -d tag_name

git tag -n
태그 주석 포함 

git tag tag_name

모든 로컬 브런치는 커밋하기 전 시점(working~stage)까지는 수정된 파일들을 공유한다.
커밋 이후 시점(HEAD)부터는 공유하지 않는다.

git reset remote_alias/remote_branch_name
stage, HEAD에 있는 파일들을 working으로 돌려보낸다. working에 있던 파일들은 영향을 받지 않는다.

git reset --hard remote_alias/remote_branch_name
stage, HEAD에 있는 파일들을 강제로 삭제한다. working에 있던 파일들은 영향을 받지 않는다.

git rm -f 1234.txt
stage 또는 working에서 강제로 삭제한다.

git rm -cached 1234.txt
unstaging 한다.

git add -i
대화식 추가. 추가할 파일을 선택하여 한 번에 추가할 수 있다.

git log --graph --oneline --decorate
decorate는 태그 정보를 포함하여 보여준다.

git merge local_branch_name 
현재 브랜치를 local_branch_name과 머지해서 현재 브랜치가 나아간다.
또는 현재 브랜치가 local_branch_name쪽으로 fast-forward merge한다.

git commit --amend
가장 최근 커밋의 내용을 변경

git revert HEAD
HEAD 바로 이전 커밋의 변경사항으로 되돌리되, 되돌린 사항을 새로운 커밋을 만든다.

git revert HEAD~~
HEAD 바로 이전이전 커밋의 변경사항으로 되돌리되, 되돌린 사항을 새로운 커밋을 만든다.

git reset --hard HEAD~~
HEAD 바로 이전이전 커밋의 변경사항으로 되돌린다. 이때 이후 시점의 커밋들은 삭제된다.

git reset --hard ORIG_HEAD
실수로 reset한 걸 반대로 되돌린다.

git cherry-pick commit_id
commit 로그를 보고 커밋 id를 찾아 체리픽하면 해당 커밋의 내용만 가져올 수 있다.
